/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.jbpm.examples;


import java.util.Map;
import java.util.HashMap;
import org.kie.api.runtime.process.ProcessInstance;
import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;
import org.jbpm.kie.services.impl.event.ProcessInstanceStartedEvent;
import org.jbpm.kie.services.impl.event.ProcessInstanceCompletedEvent;
import org.jbpm.kie.services.impl.event.NodeInstanceTriggeredEvent;
import org.jbpm.kie.services.impl.event.NodeInstanceLeftEvent;
import org.kie.api.task.TaskService;
import org.jbpm.services.task.impl.factories.TaskFactory;
import java.io.StringReader;
import org.kie.api.task.model.Task;
import org.kie.api.runtime.KieSession;


global TaskService taskService;

declare ProcessInstanceStartedEvent
	@role(event)
end

declare ProcessInstanceCompletedEvent
	@role(event)
end

declare NodeInstanceTriggeredEvent
	@role(event)
end

declare NodeInstanceLeftEvent
	@role(event)
end

query getProcessInstances()
    $w: WorkflowProcessInstanceImpl( )
end

rule "Ongoing process for more than 15 seconds"
 when
	$w: WorkflowProcessInstanceImpl( )
	$pse: ProcessInstanceStartedEvent(processInstanceId == $w.getId()) from entry-point "process-events"
        not(ProcessInstanceCompletedEvent(processInstanceId == $w.getId(),  this after[0s, 2m] $pse ) from entry-point "process-events") 
 then
	
	System.out.println("The Process Instance (id="+$w.getId()+") is taking too long!");
end


rule "Warn Two Process Instance doing a Release on the same Directory"
 when
	$w1: WorkflowProcessInstanceImpl($releasePath1: variables['release_path'] )
	$w2: WorkflowProcessInstanceImpl( id > $w1.id  , variables['release_path'] == $releasePath1)
 then

        kcontext.getKieRuntime().abortProcessInstance($w2.getId());
end

rule "More than two Fix Issues for the same Release Process Instance"
  when
	$w1: WorkflowProcessInstanceImpl($id: id)
	Number( intValue > 1) from accumulate($e: NodeInstanceTriggeredEvent(processInstanceId == $id, nodeName == "Fix Issues") from entry-point "process-events", count($e))

  then
	System.out.println("WARN: The Process Instance (id="+$w1.getId()+") has being rejected at least 2 times");
end

rule "Fix Issues Task pending for more than 30 seconds"
  when
	$w1: WorkflowProcessInstanceImpl($id: id)
	$onEntry: NodeInstanceTriggeredEvent(processInstanceId == $id, $nid: nodeInstanceId, nodeName == "Fix Issues") from entry-point "process-events"
	$onExit: NodeInstanceLeftEvent(this after[30s] $onEntry, processInstanceId == $id,  nodeInstanceId == $nid, nodeName == "Fix Issues") from entry-point "process-events"
  then
	System.out.println("WARN: There is a Pending Fix Issues Task for process ("+$id+") for more than 30 seconds now");
end


rule "Trigger Test is taking too much time to run the tests - Create ad - hoc task"
  when
	$w1: WorkflowProcessInstanceImpl($id: id)
	$onEntry: NodeInstanceTriggeredEvent(processInstanceId == $id, $nid: nodeInstanceId,  nodeName == "Trigger Tests") from entry-point "process-events"
	$onExit: NodeInstanceLeftEvent(this after[10s] $onEntry, processInstanceId == $id, nodeInstanceId == $nid, nodeName == "Trigger Tests") from entry-point "process-events"
  then
	System.out.println("WARN: Trigger Tests activity from process id="+$w1.getId()+" is took too much time! an ad-hoc task was created to improve the performance of those tests");
	String str = "(with (new Task()) { priority = 55, taskData = (with( new TaskData()) { } ), ";
        str += "peopleAssignments = (with ( new PeopleAssignments() ) { potentialOwners = [new Group('Release Manager')  ], }),";
        str += "names = [ new I18NText( 'en-UK', 'Improve Trigger Test Performance')] })";
	Task task = TaskFactory.evalTask(new StringReader(str));
        taskService.addTask(task, new HashMap<String, Object>());
	retract($onEntry);
	retract($onExit);
end

