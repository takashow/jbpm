/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

//created on: Jan 11, 2013
package defaultPackage

//list any import classes here.
import org.kie.api.task.model.Task;
import org.kie.api.task.model.User;
import org.kie.api.task.model.Status;
import org.kie.api.task.model.PeopleAssignments;
import org.jbpm.services.task.rule.TaskServiceRequest;
import org.kie.internal.task.api.model.InternalTaskData;

import org.jbpm.services.task.impl.model.*;
import org.jbpm.services.task.internals.rule.AssignmentService;
import org.jbpm.services.task.internals.lifecycle.*;

import java.util.HashMap;
import java.util.List;


//declare any global variables here
global TaskServiceRequest request;
global AssignmentService assignmentService;



rule "Exclude john"

    when
        $task : Task()
        $actualOwner : User( id == 'john') from $task.getTaskData().getActualOwner()
    then
        $task.getPeopleAssignments().getPotentialOwners().remove($actualOwner);
        InternalTaskData taskData = (InternalTaskData) $task.getTaskData();
        taskData.setActualOwner(null);
        taskData.setStatus(Status.Created);
        MVELLifeCycleManager.assignOwnerAndStatus(taskData, $task.getPeopleAssignments().getPotentialOwners());
end

rule "Assign to mary"

    when
        $task : Task()
        PeopleAssignments(potentialOwners contains new UserImpl('mary')) from $task.getPeopleAssignments()
    then
        ((TaskDataImpl)$task.getTaskData()).setActualOwner(new UserImpl('mary'));
        ((TaskDataImpl)$task.getTaskData()).setStatus(Status.Reserved);
end

rule "Dont allow tasks for peter"

    when
        $task : Task()
        PeopleAssignments(potentialOwners contains new UserImpl('peter')) from $task.getPeopleAssignments()
    then
        request.setAllowed(false);
        request.addReason("peter does not work here any more");
end

rule "Dont allow tasks for manager John"

    when
        $task : Task()
        $params : HashMap(this["manager"] == 'John')
        
    then
        request.setAllowed(false);
        request.addReason("John (manager) does not work here any more");
end

rule "Assign using service"

    when
        $task : Task()
        PeopleAssignments(eval(potentialOwners.isEmpty())) from $task.getPeopleAssignments()
    then
        assignmentService.assignTask($task);
        InternalTaskData taskData = (InternalTaskData) $task.getTaskData();
        taskData.setStatus(Status.Created);
        MVELLifeCycleManager.assignOwnerAndStatus(taskData, $task.getPeopleAssignments().getPotentialOwners());
end

